AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  IDEInstance:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64

  IDEInstanceType:
    Type: String
    Default: m5.large

  EETeamRoleArn:
    Type: String
    Description: The Arn of the Cloud9 Owner to be set if 3rdParty deployment.
    Default: 'arn:aws:iam::012345678901:assumed-role/ChangeMe/ChangeMe'
    #AllowedPattern: '^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):(iam|sts)::\d+:(root|(user\/[\w+=/:,.@-]{1,64}|federated-user\/[\w+=/:,.@-]{2,32}|assumed-role\/[\w+=:,.@-]{1,64}\/[\w+=,.@-]{1,64}))$'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'IDE Configuration'
        Parameters:
          - IDEInstanceType
          - EETeamRoleArn

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.254.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDay
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDay
  
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDay-NATGW

  # Public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublic


  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.254.0.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublicA
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: "10.254.1.0/24"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublicB
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: "10.254.2.0/24"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublicC
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  # Private subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivate
  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NATGateway
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.254.128.0/19"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivateA
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: "10.254.160.0/19"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivateB
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: "10.254.192.0/19"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivateC
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC


  SecretsEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: EKS Secrets Encryption Key
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
          Action: "kms:*"
          Resource: "*"

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub eks.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSClusterCreatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                  - eks:CreateCluster
                  - eks:DeleteCluster
                Resource: "*"
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !GetAtt IdeRole.Arn
          PolicyName: CreateEKSCluster

  EKSClusterCreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt EKSClusterCreatorRole.Arn
      #Architectures:
      #  - arm64
      Runtime: python3.12
      Handler: index.handler
      Timeout: 900
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import json
          import random
          import string


          def handler(event, context):
              print("REQUEST RECEIVED: \n" + json.dumps(event))

              try:
                  if event['RequestType'] == 'Delete':
                      eks = boto3.client('eks')
                      eks.delete_cluster(name=event['PhysicalResourceId'])
                      waiter = eks.get_waiter('cluster_deleted')
                      waiter.wait(name=event['PhysicalResourceId'])
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  sts = boto3.client('sts')
                  response = sts.assume_role(
                      RoleArn=event['ResourceProperties']['CreatorRoleArn'],
                      RoleSessionName='Creator'
                  )
                  eks = boto3.client('eks',
                                    aws_access_key_id=response['Credentials']['AccessKeyId'],
                                    aws_secret_access_key=response['Credentials']['SecretAccessKey'],
                                    aws_session_token=response['Credentials']['SessionToken']
                                    )

                  cluster_name='eksworkshop-eksctl'

                  print('Creating cluster ' + cluster_name)
                  response = eks.create_cluster(
                      name=cluster_name,
                      version='1.28',
                      roleArn=event['ResourceProperties']['ClusterRoleArn'],
                      resourcesVpcConfig={
                          'subnetIds': event['ResourceProperties']['SubnetIds'],
                          'endpointPublicAccess': False,
                          'endpointPrivateAccess': True
                      },
                      logging={
                          'clusterLogging': [
                              {
                                  'types': [
                                      'api', 'audit', 'authenticator', 'controllerManager', 'scheduler',
                                  ],
                                  'enabled': True
                              },
                          ]
                      },
                      encryptionConfig=[
                          {
                              'resources': [
                                  'secrets',
                              ],
                              'provider': {
                                  'keyArn': event['ResourceProperties']['KeyArn']
                              }
                          },
                      ]
                  )

                  print('Waiting for cluster to become active...')
                  waiter = eks.get_waiter('cluster_active')
                  waiter.wait(name=cluster_name)
                  response = eks.describe_cluster(name=cluster_name)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'OpenIdConnectIssuerUrl': response['cluster']['identity']['oidc']['issuer'],
                      'ClusterSecurityGroupId': response['cluster']['resourcesVpcConfig']['clusterSecurityGroupId'],
                      'CertificateAuthorityData': response['cluster']['certificateAuthority']['data'],
                      'Endpoint': response['cluster']['endpoint']
                  }, cluster_name)
              except Exception as err:
                  print(err)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  EKSCluster:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt EKSClusterCreatorFunction.Arn
      CreatorRoleArn: !GetAtt IdeRole.Arn
      ClusterRoleArn: !GetAtt EKSClusterRole.Arn
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      KeyArn: !GetAtt SecretsEncryptionKey.Arn

  EKSNodegroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub ec2.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - logs:DescribeLogGroups
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
          PolicyName: CWLogsAccessForCNINodeAgent

  EKSNodegroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodegroupRole.Arn
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      AmiType: AL2_x86_64
      CapacityType: ON_DEMAND
      NodegroupName: "mng-al2"
      InstanceTypes:
        - t3a.large
        - t3.large
        - c5.large
        - m5a.large
        - m5.large
      ScalingConfig:
        DesiredSize: 3
        MinSize: 3
        MaxSize: 5

  EKSNodegroupBottlerocket:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodegroupRole.Arn
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      AmiType: BOTTLEROCKET_x86_64
      CapacityType: ON_DEMAND
      NodegroupName: "mng-br"
      InstanceTypes:
        - t3a.small
      ScalingConfig:
        DesiredSize: 0
        MinSize: 0
        MaxSize: 5

  # OIDC provider (for EKS IAM Roles for Service Accounts)
  ThumbprintExtractorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ThumbprintExtractorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt ThumbprintExtractorRole.Arn
      Architectures:
        - arm64
      Runtime: nodejs16.x
      Handler: index.handler
      Timeout: 10
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const tls = require('tls');
          const url = require('url');

          exports.handler = function (event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
              if (event.RequestType === 'Delete') {
                  response.send(event, context, 'SUCCESS');
                  return;
              }
              const parsedUrl = url.parse(event.ResourceProperties.Url);
              const socket = tls.connect({
                  host: parsedUrl.host,
                  port: parsedUrl.port || 443,
                  rejectUnauthorized: false,
              });
              socket.on('secureConnect', () => {
                  let cert = socket.getPeerCertificate(true);
                  // Obtain the last **intermediate** certificate in the chain
                  // See https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc_verify-thumbprint.html
                  while (cert.issuerCertificate.issuerCertificate !== cert.issuerCertificate) {
                      cert = cert.issuerCertificate;
                  }
                  socket.destroy();
                  response.send(event, context, 'SUCCESS', {
                      Fingerprint: cert.fingerprint.replace(/:/g, '')
                  });
              });
          }

  ThumbprintExtractorCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ThumbprintExtractorFunction.Arn
      Url: !GetAtt EKSCluster.OpenIdConnectIssuerUrl

  OIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
      ClientIdList:
        - !Sub sts.${AWS::URLSuffix}
      ThumbprintList:
        - !GetAtt ThumbprintExtractorCustomResource.Fingerprint

  CodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Codebuild Internet Group
      GroupDescription: CodeBuild SecurityGroup
      VpcId: !Ref VPC

  AllowCodebuildToAccessCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow connections from CodeBuild SecurityGroup
      IpProtocol: tcp
      GroupId: !GetAtt EKSCluster.ClusterSecurityGroupId
      SourceSecurityGroupId: !Ref CodeBuildSecurityGroup
      FromPort: 443
      ToPort: 443
    
      
# =================== IDE ================

  IdePrefixListFunctionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  IdePrefixListFunctionServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: ec2:DescribeManagedPrefixLists
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
      PolicyName: IdePrefixListFunctionServiceRoleDefaultPolicy
      Roles:
        - !Ref IdePrefixListFunctionServiceRole

  IdePrefixListFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          from __future__ import print_function
          import boto3
          import traceback
          import cfnresponse
          def lambda_handler(event, context):
              print('Event: {}'.format(event))
              print('context: {}'.format(context))
              responseData = {}
              status = cfnresponse.SUCCESS
              if event['RequestType'] == 'Delete':
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
              else:
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')
                      res = ec2.describe_managed_prefix_lists(
                         Filters=[{
                            'Name': 'prefix-list-name',
                            'Values': ['com.amazonaws.global.cloudfront.origin-facing']
                         }]
                      )
                      responseData = {'PrefixListId': str(res['PrefixLists'][0]['PrefixListId'])}
                  except Exception as e:
                      status = cfnresponse.FAILED
                      tb_err = traceback.format_exc()
                      print(tb_err)
                      responseData = {'Error': tb_err}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
      Handler: index.lambda_handler
      Role: !GetAtt IdePrefixListFunctionServiceRole.Arn
      Runtime: python3.12
      Timeout: 180
    DependsOn:
      - IdePrefixListFunctionServiceRoleDefaultPolicy

  IdePrefixListResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt IdePrefixListFunction.Arn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  IdeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - codebuild.amazonaws.com
                - ssm.amazonaws.com    
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root                          
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/AdministratorAccess'

  IdeRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource: !Ref IdePasswordSecret
        Version: '2012-10-17'
      PolicyName: IdeRoleDefaultPolicy
      Roles:
        - !Ref IdeRole

  IdeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: IDE security group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId: !Ref VPC

  AllowIdeToAccessCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow connections from Ide SecurityGroup
      IpProtocol: tcp
      GroupId: !GetAtt EKSCluster.ClusterSecurityGroupId
      SourceSecurityGroupId: !Ref IdeSecurityGroup
      FromPort: 443
      ToPort: 443  

  IdeSecurityGroupfromIndirectPeer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: HTTP from CloudFront only
      FromPort: 80
      GroupId: !GetAtt IdeSecurityGroup.GroupId
      IpProtocol: tcp
      SourcePrefixListId: !GetAtt IdePrefixListResource.PrefixListId
      ToPort: 80

  IdeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IdeRole

  IdeInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnetA
      InstanceType: !Ref IDEInstanceType
      SecurityGroupIds:
        - !Ref IdeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 50
            VolumeType: gp3
      IamInstanceProfile: !Ref IdeInstanceProfile
      ImageId: !Ref IDEInstance
      Tags:
        - Key: Name
          Value: WorkshopIDE
      UserData: !Base64 '#!/bin/bash'
    DependsOn:
      - IdeRoleDefaultPolicy
      - IdeRole
      - InternetGateway

  IdeBootstrapFunctionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  IdeBootstrapFunctionServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - iam:ListInstanceProfiles
              - iam:PassRole
              - ssm:DescribeInstanceInformation
              - ssm:GetCommandInvocation
              - ssm:SendCommand
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
      PolicyName: IdeBootstrapFunctionServiceRoleDefaultPolicy
      Roles:
        - !Ref IdeBootstrapFunctionServiceRole

  IdeBootstrapFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          from botocore.exceptions import WaiterError
          def lambda_handler(event, context):
              print('Event: {}'.format(event))
              print('context: {}'.format(context))
              responseData = {}
              status = cfnresponse.SUCCESS
              if event['RequestType'] == 'Delete':
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
              else:
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')
                      ssm = boto3.client('ssm')
                      instance_id = event['ResourceProperties']['InstanceId']
                      print('Waiting for the instance to be ready...')
                      # Wait for Instance to become ready
                      instance_state = 'unknown'
                      print('Instance is currently in state'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          di = ec2.describe_instances(InstanceIds=[instance_id])
                          instance_state = di['Reservations'][0]['Instances'][0]['State']['Name']
                          print('Waiting for instance in state: {}'.format(instance_state))
                      print('Instance is ready')
                      print('Waiting for instance to come online in SSM...')
                      for i in range(1, 60):
                        response = ssm.describe_instance_information(Filters=[{'Key': 'InstanceIds', 'Values': [instance_id]}])
                        if len(response["InstanceInformationList"]) == 0:
                          print('No instances in SSM')
                        elif len(response["InstanceInformationList"]) > 0 and \
                              response["InstanceInformationList"][0]["PingStatus"] == "Online" and \
                              response["InstanceInformationList"][0]["InstanceId"] == instance_id:
                          print('Instance is online in SSM')
                          break
                        time.sleep(10)
                      ssm_document = event['ResourceProperties']['SsmDocument']
                      ssm.send_command(
                          InstanceIds=[instance_id],
                          DocumentName=ssm_document)
                      responseData = {'Success': 'Started bootstrapping for instance: '+instance_id}
                  except Exception as e:
                      status = cfnresponse.FAILED
                      tb_err = traceback.format_exc()
                      print(tb_err)
                      responseData = {'Error': tb_err}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
      Environment:
        Variables:
          DiskSize: '32'
      Handler: index.lambda_handler
      Role: !GetAtt IdeBootstrapFunctionServiceRole.Arn
      Runtime: python3.12
      Timeout: 900
    DependsOn:
      - IdeBootstrapFunctionServiceRoleDefaultPolicy
      - IdeBootstrapFunctionServiceRole

  IdePasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        ExcludeCharacters: '"@/\'
        ExcludePunctuation: true
        GenerateStringKey: password
        IncludeSpace: false
        PasswordLength: 32
        SecretStringTemplate: '{"password":""}'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  IdeOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        CookiesConfig:
          CookieBehavior: all
        HeadersConfig:
          HeaderBehavior: allViewer
        Name: IdeOriginRequestPolicy
        QueryStringsConfig:
          QueryStringBehavior: all

  IdeCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 2592000
        MinTTL: 1
        Name: !Join
          - ''
          - - IdeCachePolicy-
            - !Ref AWS::Region
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Accept-Charset
              - Authorization
              - Origin
              - Accept
              - Referer
              - Host
              - Accept-Language
              - Accept-Encoding
              - Accept-Datetime
          QueryStringsConfig:
            QueryStringBehavior: all

  IdeDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - IdeCachePolicy
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          Compress: true
          OriginRequestPolicyId: !Ref IdeOriginRequestPolicy
          TargetOriginId: IdeDistributionOrigin
          ViewerProtocolPolicy: allow-all
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1.2
            DomainName: !GetAtt IdeInstance.PublicDnsName
            Id: IdeDistributionOrigin
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDay          

  IdeBootstrapWaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  IdeBootstrapWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle: !Ref IdeBootstrapWaitConditionHandle
      Timeout: '900'

  IdeBootstrapDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentFormat: YAML
      DocumentType: Command
      UpdateMethod: NewVersion
      Content:
        schemaVersion: '2.2'
        description: Bootstrap IDE
        parameters:
          BootstrapScript:
            type: String
            description: (Optional) Custom bootstrap script to run.
            default: ''
        mainSteps:
          - action: aws:runShellScript
            name: IdeBootstrapFunction
            inputs:
              runCommand:
                - !Sub
                  - |-
                    bash << 'HEREDOC'
                    set -e
                    set -o xtrace

                    # ========= EKS Security Workshop =======
                    # Install docker and base package
                    dnf install -y docker git
                    service docker start
                    usermod -aG docker ec2-user
                    su -l -c 'aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com' ec2-user
                    curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'
                    unzip -o -q awscliv2.zip -d /tmp
                    sudo /tmp/aws/install --update
                    rm -rf aws awscliv2.zip
                    curl -sSL -o /tmp/kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.2/2023-10-12/bin/linux/amd64/kubectl
                    chmod +x /tmp/kubectl
                    mv /tmp/kubectl /usr/local/bin/kubectl

                    su -l -c 'aws eks update-kubeconfig --name ${EKSCluster} --region ${AWS::Region} --role-arn ${instanceIamRoleArn}' ec2-user
                    su -l -c 'echo "export AWS_ACCOUNT_ID=${AWS::AccountId}" >> ~/.bash_profile' ec2-user
                    su -l -c 'echo "export ACCOUNT_ID=${AWS::AccountId}" >> ~/.bash_profile' ec2-user
                    su -l -c 'echo "export AWS_DEFAULT_REGION=${AWS::Region}" >> ~/.bash_profile' ec2-user
                    su -l -c 'echo "export AWS_REGION=${AWS::Region}" >> ~/.bash_profile' ec2-user
                    su -l -c 'echo "export EKS_CLUSTER=${EKSCluster}" >> ~/.bash_profile' ec2-user
                    su -l -c 'echo "export EKS_CLUSTER1_NAME=${EKSCluster}" >> ~/.bash_profile' ec2-user
                    su -l -c 'export AZS=($(aws ec2 describe-availability-zones --query 'AvailabilityZones[].ZoneName' --output text --region ${AWS::Region})) && echo "export AZS=(${!AZS[@]})" | tee -a ~/.bash_profile' ec2-user

                    curl -sSL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                    chmod +x /tmp/eksctl
                    mv /tmp/eksctl /usr/local/bin
                    curl -sSL "https://github.com/awslabs/eksdemo/releases/download/v0.12.0/eksdemo_Linux_x86_64.tar.gz" | tar xz -C /tmp
                    chmod +x /tmp/eksdemo
                    mv /tmp/eksdemo /usr/local/bin

                    yum -y install jq gettext bash-completion 
                    echo '' | tee -a /home/ec2-user/bashrc
                    /usr/local/bin/kubectl completion bash > /etc/bash_completion.d/kubectl
                    /usr/local/bin/eksctl completion bash > /etc/bash_completion.d/eksctl
                    mv /tmp/completions/eksdemo.bash /etc/bash_completion.d/eksdemo
                    su -l -c 'echo "alias k=kubectl" >> ~/.bash_profile' ec2-user
                    su -l -c 'echo "alias ll=\"ls -la\"" >> ~/.bash_profile' ec2-user
                    su -l -c 'echo "complete -F __start_kubectl k" >> ~/.bash_profile' ec2-user

                    curl -fsSL -o /tmp/helm.tgz https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz
                    tar -C /tmp -xzf /tmp/helm.tgz
                    mv /tmp/linux-amd64/helm /usr/local/bin/helm
                    rm -rf /tmp/helm.tgz /tmp/linux-amd64
                    
                    su -l -c 'helm repo add eks https://aws.github.io/eks-charts' ec2-user
                    su -l -c 'helm repo update' ec2-user
                    #Install Krew and stern
                    su -l -c "(cd \$(mktemp -d) && pwd &&
                      OS=\$(uname | tr '[:upper:]' '[:lower:]') &&
                      ARCH=\$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/') &&
                      KREW=krew-\${!OS}_\${!ARCH} && echo \$KREW
                      curl -fsSLO \"https://github.com/kubernetes-sigs/krew/releases/latest/download/\${!KREW}.tar.gz\" &&
                      tar zxvf \${!KREW}.tar.gz &&
                      ./\${!KREW} install krew
                    )" ec2-user 
                    su -l -c 'echo "export PATH=${!KREW_ROOT:-/home/ec2-user/.krew}/bin:$PATH" | tee -a ~/.bash_profile &&
                    source /home/ec2-user/.bash_profile &&
                    kubectl krew install stern' ec2-user
                    su -l -c 'curl -sS https://webinstall.dev/k9s | bash' ec2-user
                    #sudo /home/ec2-user/.nvm/versions/node/v18.17.1/bin/npm i -g c9
                    su -l -c 'npm i -g c9' || true
                    su -l -c 'aws configure set default.region ${AWS::Region}' ec2-user
                    su -l -c 'aws configure set cli_pager ""' ec2-user

                    # ====== IDE Specific=======

                    PASSWORD_SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "${passwordName}" --query 'SecretString' --output text)
                    export IDE_PASSWORD=$(echo "$PASSWORD_SECRET_VALUE" | jq -r '.password')
                    # Set some useful variables
                    export TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
                    export AWS_REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $4}')
                    export EC2_PRIVATE_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/local-ipv4)
                    tee /etc/profile.d/workshop.sh <<EOF
                    export INSTANCE_IAM_ROLE_NAME="${instanceIamRoleName}"
                    export INSTANCE_IAM_ROLE_ARN="${instanceIamRoleArn}"
                    export AWS_REGION="$AWS_REGION"
                    export EC2_PRIVATE_IP="$EC2_PRIVATE_IP"
                    export IDE_DOMAIN="${domain}"
                    export IDE_URL="https://${domain}"
                    export IDE_PASSWORD="$IDE_PASSWORD"
                    EOF
                    source /etc/profile.d/workshop.sh
                    # Set PS1
                    tee /etc/profile.d/custom_prompt.sh <<EOF
                    #!/bin/sh
                    export PROMPT_COMMAND='export PS1="\u:\w:$ "'
                    EOF
                    # Generate an SSH key for ec2-user
                    sudo -u ec2-user bash -c "ssh-keygen -t rsa -N '' -f ~/.ssh/id_rsa -m pem <<< y"
                    # Install code-server
                    codeServer=$(dnf list installed code-server | wc -l)
                    if [ "$codeServer" -eq "0" ]; then
                      sudo -u ec2-user "codeServerVersion=${codeServerVersion}" bash -c 'curl -fsSL https://code-server.dev/install.sh | sh -s -- --version ${codeServerVersion}'
                      systemctl enable --now code-server@ec2-user
                    fi
                    sudo -u ec2-user bash -c 'mkdir -p ~/.config/code-server'
                    sudo -u ec2-user bash -c 'touch ~/.config/code-server/config.yaml'
                    tee /home/ec2-user/.config/code-server/config.yaml <<EOF
                    cert: false
                    auth: password
                    password: "$IDE_PASSWORD"
                    bind-addr: 127.0.0.1:8889
                    EOF
                    STARTUP_EDITOR='none'
                    # Create default directory for workspace
                    sudo -u ec2-user bash -c 'mkdir -p ~/environment'
                    sudo -u ec2-user bash -c 'mkdir -p ~/.local/share/code-server/User'
                    sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/User/settings.json'
                    tee /home/ec2-user/.local/share/code-server/User/settings.json <<EOF
                    {
                      "extensions.autoUpdate": false,
                      "extensions.autoCheckUpdates": false,
                      "security.workspace.trust.enabled": false,
                      "workbench.startupEditor": "$STARTUP_EDITOR",
                      "task.allowAutomaticTasks": "on",
                      "telemetry.telemetryLevel": "off"
                    }
                    EOF
                    sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/User/keybindings.json'
                    tee /home/ec2-user/.local/share/code-server/User/keybindings.json << 'EOF'
                    [
                      {
                        "key": "shift+cmd+/",
                        "command": "remote.tunnel.forwardCommandPalette"
                      }
                    ]
                    EOF
                    if [ ! -z "${splashUrl}" ]; then
                    sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/User/tasks.json'
                    tee /home/ec2-user/.local/share/code-server/User/tasks.json << 'EOF'
                    {
                      "version": "2.0.0",
                      "tasks": [
                        {
                          "label": "Open Splash",
                          "command": "${!input:openSimpleBrowser}",
                          "presentation": {
                            "reveal": "always",
                            "panel": "new"
                          },
                          "runOptions": {
                            "runOn": "folderOpen"
                          }
                        }
                      ],
                      "inputs": [
                        {
                          "id": "openSimpleBrowser",
                          "type": "command",
                          "command": "simpleBrowser.show",
                          "args": [
                            "${splashUrl}"
                          ]
                        }
                      ]
                    }
                    EOF
                    fi
                    EXTENSIONS="${extensions}"
                    IFS=',' read -ra array <<< "$EXTENSIONS"
                    # Iterate over each entry in the array
                    for extension in "${!array[@]}"; do
                      # Use retries as extension installation seems unreliable
                      sudo -u ec2-user bash -c "set -e; (r=5;while ! code-server --install-extension $extension --force ; do ((--r))||exit;sleep 5;done)"
                    done
                    if [ ! -f "/home/ec2-user/.local/share/code-server/coder.json" ]; then
                      sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/coder.json'
                      echo '{ "query": { "folder": "/home/ec2-user/environment" } }' > /home/ec2-user/.local/share/code-server/coder.json
                    fi
                    systemctl restart code-server@ec2-user
                    # Install caddy
                    dnf copr enable -y @caddy/caddy epel-9-x86_64
                    dnf install -y caddy
                    systemctl enable --now caddy
                    tee /etc/caddy/Caddyfile <<EOF
                    http://${domain} {
                      reverse_proxy 127.0.0.1:8889
                    }
                    EOF
                    systemctl restart caddy
                    if [ ! -f "/home/ec2-user/.local/share/code-server/coder.json" ]; then
                      sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/coder.json'
                      echo '{ "query": { "folder": "/home/ec2-user/environment" } }' > /home/ec2-user/.local/share/code-server/coder.json
                    fi
                    ${customBootstrapScript}
                    HEREDOC
                    exit_code=$?
                    /opt/aws/bin/cfn-signal -e $exit_code '${waitConditionHandleUrl}'
                    exit $exit_code
                  - instanceIamRoleName: !Ref IdeRole
                    instanceIamRoleArn: !GetAtt IdeRole.Arn
                    passwordName: !Join
                      - '-'
                      - - !Select
                          - 0
                          - !Split
                            - '-'
                            - !Select
                              - 6
                              - !Split
                                - ':'
                                - !Ref IdePasswordSecret
                        - !Select
                          - 1
                          - !Split
                            - '-'
                            - !Select
                              - 6
                              - !Split
                                - ':'
                                - !Ref IdePasswordSecret
                    domain: !GetAtt IdeDistribution.DomainName
                    codeServerVersion: 4.93.1 
                    waitConditionHandleUrl: !Ref IdeBootstrapWaitConditionHandle
                    splashUrl: ''
                    extensions: ''                      
                    customBootstrapScript: !Sub
                      - |
                        set -e
                        # Install dependencies and tools
                        sudo yum install -y https://s3.amazonaws.com/session-manager-downloads/plugin/latest/linux_64bit/session-manager-plugin.rpm
                        sudo wget -O /usr/local/bin/hey https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64
                        sudo chmod +x /usr/local/bin/hey
                        export IDE_DOMAIN="${domain}"
                        export IDE_URL="https://${domain}"   
                        echo "IDE_URL is $IDE_URL"                     
                      - domain: !GetAtt IdeDistribution.DomainName

  IdeBootstrapResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt IdeBootstrapFunction.Arn
      InstanceId: !Ref IdeInstance
      SsmDocument: !Ref IdeBootstrapDocument
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  IdePasswordExporterFunctionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  IdePasswordExporterFunctionServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource: !Ref IdePasswordSecret
        Version: '2012-10-17'
      PolicyName: IdePasswordExporterFunctionServiceRoleDefaultPolicy
      Roles:
        - !Ref IdePasswordExporterFunctionServiceRole

  IdePasswordExporterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          import traceback
          import cfnresponse
          import boto3
          import json
          def lambda_handler(event, context):
              print('Event: {}'.format(event))
              print('context: {}'.format(context))
              responseData = {}
              status = cfnresponse.SUCCESS
              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
              else:
                  try:
                      passwordName = event['ResourceProperties']['PasswordName']
                      secretsmanager = boto3.client('secretsmanager')
                      response = secretsmanager.get_secret_value(
                          SecretId=passwordName,
                      )
                      responseData = json.loads(response['SecretString'])
                  except Exception as e:
                      status = cfnresponse.FAILED
                      tb_err = traceback.format_exc()
                      print(tb_err)
                      responseData = {'Error': tb_err}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
      Handler: index.lambda_handler
      Role: !GetAtt IdePasswordExporterFunctionServiceRole.Arn
      Runtime: python3.12
      Timeout: 180
    DependsOn:
      - IdePasswordExporterFunctionServiceRoleDefaultPolicy
      - IdePasswordExporterFunctionServiceRole

  IdePasswordExporter:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt IdePasswordExporterFunction.Arn
      PasswordName: !Join
        - '-'
        - - !Select
            - 0
            - !Split
              - '-'
              - !Select
                - 6
                - !Split
                  - ':'
                  - !Ref IdePasswordSecret
          - !Select
            - 1
            - !Split
              - '-'
              - !Select
                - 6
                - !Split
                  - ':'
                  - !Ref IdePasswordSecret
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

Outputs:

  IdeUrl:
    Value: !Join
      - ''
      - - https://
        - !GetAtt IdeDistribution.DomainName
  IdePassword:
    Value: !GetAtt IdePasswordExporter.password


  VPC:
    Description: 'VPC'
    Value: !Ref VPC
    Export:
      Name: vpcId


  SubnetAPrivate:
    Description: 'Subnet A private'
    Value: !Ref PrivateSubnetA
    Export:
      Name: SubnetAPrivate


  CodeBuildSecurityGroup:
    Description: 'Security group for codebuild'
    Value: !Ref CodeBuildSecurityGroup
    Export:
      Name: CodeBuildSecurityGroup
