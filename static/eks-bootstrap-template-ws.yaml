AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  Cloud9EnvironmentName:
    Description: How the name appears in the console
    Type: String
    Default: "none"

  Cloud9IDEInstanceType:
    Description: The type of instance to connect to the environment
    Type: String
    Default: c5.large
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
      - c5.large
    ConstraintDescription: Must be a valid Cloud9 instance type

  EksWorkshopC9InstanceVolumeSize: 
    Type: Number
    Description: The Size in GB of the Cloud9 Instance Volume. 
    Default: 30

  WorkstationRoleName:
    Description: Workshop Studio participant role arn
    Type: String
    Default: eks-security-workshop

  C9EnvType:
    Description: Environment type.
    Default: 3rdParty
    Type: String
    AllowedValues:
      - 3rdParty
      - aws-event
    ConstraintDescription: must specify aws-event or 3rdParty.

  EETeamRoleArn:
    Type: String
    Description: The Arn of the Cloud9 Owner to be set if 3rdParty deployment.
    Default: 'arn:aws:iam::[ChangeMe]:role/[ChangeMe]'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Cloud9 Configuration'
        Parameters:
          - Cloud9EnvironmentName
          - WorkstationRoleName
          - C9EnvType
          - EETeamRoleArn

Conditions:
  Create3rdPartyResources: !Equals [!Ref C9EnvType, 3rdParty]
  CreateAWSEventResources: !Equals [!Ref C9EnvType, aws-event]
  IsCloud9NotNamed: !Equals [ !Ref Cloud9EnvironmentName, none ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.254.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDay
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDay
  
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDay-NATGW

  # Public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublic


  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.254.0.0/24"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublicA
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: "10.254.1.0/24"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublicB
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: "10.254.2.0/24"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublicC
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  # Private subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivate
  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NATGateway
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.254.128.0/19"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivateA
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: "10.254.160.0/19"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivateB
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: "10.254.192.0/19"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivateC
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC

  Cloud9Environment:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: Amazon EKS Security Immersion Day
      Name: !If [ IsCloud9NotNamed, !Ref AWS::StackName, !Ref Cloud9EnvironmentName ]
      InstanceType: !Ref Cloud9IDEInstanceType
      AutomaticStopTimeMinutes: 3600
      SubnetId: !Ref PublicSubnetA
      ImageId: resolve:ssm:/aws/service/cloud9/amis/amazonlinux-2-x86_64
      OwnerArn: !Sub "arn:aws:sts::${AWS::AccountId}:assumed-role/${Cloud9InstanceRole}/MasterKey"
      Tags:
        - Key: SSMBootstrap
          Value: Active
        - Key: Environment
          Value: !Sub ${Cloud9EnvironmentName}

  Cloud9InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref WorkstationRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - codebuild.amazonaws.com
                - ssm.amazonaws.com
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  Cloud9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: [Cloud9InstanceRole]
    Properties:
      InstanceProfileName: !Ref WorkstationRoleName
      Roles:
        - !Ref Cloud9InstanceRole

  SecretsEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: EKS Secrets Encryption Key
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
          Action: "kms:*"
          Resource: "*"

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub eks.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSClusterCreatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                  - eks:CreateCluster
                  - eks:DeleteCluster
                Resource: "*"
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !GetAtt Cloud9InstanceRole.Arn
          PolicyName: CreateEKSCluster

  EKSClusterCreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt EKSClusterCreatorRole.Arn
      #Architectures:
      #  - arm64
      Runtime: python3.9
      Handler: index.handler
      Timeout: 900
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import json
          import random
          import string


          def handler(event, context):
              print("REQUEST RECEIVED: \n" + json.dumps(event))

              try:
                  if event['RequestType'] == 'Delete':
                      eks = boto3.client('eks')
                      eks.delete_cluster(name=event['PhysicalResourceId'])
                      waiter = eks.get_waiter('cluster_deleted')
                      waiter.wait(name=event['PhysicalResourceId'])
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  sts = boto3.client('sts')
                  response = sts.assume_role(
                      RoleArn=event['ResourceProperties']['CreatorRoleArn'],
                      RoleSessionName='Creator'
                  )
                  eks = boto3.client('eks',
                                    aws_access_key_id=response['Credentials']['AccessKeyId'],
                                    aws_secret_access_key=response['Credentials']['SecretAccessKey'],
                                    aws_session_token=response['Credentials']['SessionToken']
                                    )

                  cluster_name='eksworkshop-eksctl'

                  print('Creating cluster ' + cluster_name)
                  response = eks.create_cluster(
                      name=cluster_name,
                      version='1.28',
                      roleArn=event['ResourceProperties']['ClusterRoleArn'],
                      resourcesVpcConfig={
                          'subnetIds': event['ResourceProperties']['SubnetIds'],
                          'endpointPublicAccess': False,
                          'endpointPrivateAccess': True
                      },
                      logging={
                          'clusterLogging': [
                              {
                                  'types': [
                                      'api', 'audit', 'authenticator', 'controllerManager', 'scheduler',
                                  ],
                                  'enabled': True
                              },
                          ]
                      },
                      encryptionConfig=[
                          {
                              'resources': [
                                  'secrets',
                              ],
                              'provider': {
                                  'keyArn': event['ResourceProperties']['KeyArn']
                              }
                          },
                      ]
                  )

                  print('Waiting for cluster to become active...')
                  waiter = eks.get_waiter('cluster_active')
                  waiter.wait(name=cluster_name)
                  response = eks.describe_cluster(name=cluster_name)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'OpenIdConnectIssuerUrl': response['cluster']['identity']['oidc']['issuer'],
                      'ClusterSecurityGroupId': response['cluster']['resourcesVpcConfig']['clusterSecurityGroupId'],
                      'CertificateAuthorityData': response['cluster']['certificateAuthority']['data'],
                      'Endpoint': response['cluster']['endpoint']
                  }, cluster_name)
              except Exception as err:
                  print(err)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  EKSCluster:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt EKSClusterCreatorFunction.Arn
      CreatorRoleArn: !GetAtt Cloud9InstanceRole.Arn
      ClusterRoleArn: !GetAtt EKSClusterRole.Arn
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      KeyArn: !GetAtt SecretsEncryptionKey.Arn

  EKSNodegroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub ec2.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - logs:DescribeLogGroups
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
          PolicyName: CWLogsAccessForCNINodeAgent

  EKSNodegroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodegroupRole.Arn
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      AmiType: AL2_x86_64
      CapacityType: ON_DEMAND
      NodegroupName: "mng-al2"
      InstanceTypes:
        - t3a.large
        - t3.large
        - m4.large
        - m5a.large
        - m5.large
      ScalingConfig:
        DesiredSize: 3
        MinSize: 3
        MaxSize: 5

  EKSNodegroupBottlerocket:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodegroupRole.Arn
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      AmiType: BOTTLEROCKET_x86_64
      CapacityType: ON_DEMAND
      NodegroupName: "mng-br"
      InstanceTypes:
        - t3a.small
      ScalingConfig:
        DesiredSize: 0
        MinSize: 0
        MaxSize: 5

  # OIDC provider (for EKS IAM Roles for Service Accounts)
  ThumbprintExtractorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ThumbprintExtractorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt ThumbprintExtractorRole.Arn
      Architectures:
        - arm64
      Runtime: nodejs16.x
      Handler: index.handler
      Timeout: 10
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const tls = require('tls');
          const url = require('url');

          exports.handler = function (event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
              if (event.RequestType === 'Delete') {
                  response.send(event, context, 'SUCCESS');
                  return;
              }
              const parsedUrl = url.parse(event.ResourceProperties.Url);
              const socket = tls.connect({
                  host: parsedUrl.host,
                  port: parsedUrl.port || 443,
                  rejectUnauthorized: false,
              });
              socket.on('secureConnect', () => {
                  let cert = socket.getPeerCertificate(true);
                  // Obtain the last **intermediate** certificate in the chain
                  // See https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc_verify-thumbprint.html
                  while (cert.issuerCertificate.issuerCertificate !== cert.issuerCertificate) {
                      cert = cert.issuerCertificate;
                  }
                  socket.destroy();
                  response.send(event, context, 'SUCCESS', {
                      Fingerprint: cert.fingerprint.replace(/:/g, '')
                  });
              });
          }

  ThumbprintExtractorCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ThumbprintExtractorFunction.Arn
      Url: !GetAtt EKSCluster.OpenIdConnectIssuerUrl

  OIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
      ClientIdList:
        - !Sub sts.${AWS::URLSuffix}
      ThumbprintList:
        - !GetAtt ThumbprintExtractorCustomResource.Fingerprint

  #
  # Prepare Cloud9 instance
  #
  AllowCloud9ToAccessCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow connections from Cloud9 instance
      IpProtocol: tcp
      GroupId: !GetAtt EKSCluster.ClusterSecurityGroupId
      SourceSecurityGroupId: !GetAtt Cloud9Initializer.SecurityGroupId
      FromPort: 443
      ToPort: 443

  RunCommandLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub ssm.${AWS::URLSuffix}
          Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "${RunCommandLogGroup.Arn}:*"
          PolicyName: Cloud9Initialize

  Cloud9InitializerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*            
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - ec2:DescribeInstances
                  - ec2:AssociateIamInstanceProfile
                  - ec2:ModifyInstanceAttribute
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - ec2:DescribeIamInstanceProfileAssociations
                  - ec2:DescribeVolumes
                  - ec2:ModifyVolume
                  - ec2:DescribeVolumesModifications
                  - ec2:RebootInstances
                  - iam:ListInstanceProfiles
                  - iam:PassRole
                  - ssm:DescribeInstanceInformation
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                  - ssm:UpdateDocument
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt SSMRole.Arn
              - Effect: Allow
                Action:
                - sts:AssumeRole
                Resource: !GetAtt Cloud9InstanceRole.Arn                
          PolicyName: Cloud9Initialize

  Cloud9Initializer:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
    - Cloud9InitializerRole    
    Properties:
      ServiceToken: !GetAtt Cloud9InitializerFunction.Arn
      Cloud9EnvironmentId: !Ref Cloud9Environment
      LabIdeInstanceProfileName: !Ref Cloud9InstanceProfile
      LabIdeInstanceProfileArn: !GetAtt Cloud9InstanceProfile.Arn
      SsmRoleArn: !GetAtt SSMRole.Arn
      LogGroupName: !Ref RunCommandLogGroup
      EKSClusterName: !Ref EKSCluster
      AccountId: !Sub "${AWS::AccountId}"
      Region: !Sub "${AWS::Region}"
      InstanceRoleArn: !GetAtt Cloud9InstanceRole.Arn
      SsmDocument: !Ref EksWorkshopC9SSMDocument
      Cloud9InstanceRole: !Ref Cloud9InstanceRole

  Cloud9InitializerFunction:
    Type: AWS::Lambda::Function
    DependsOn: [Cloud9Environment]
    Properties:
      Role: !GetAtt Cloud9InitializerRole.Arn
      Runtime: python3.9
      #Handler: index.handler
      Handler: index.lambda_handler
      Environment:
        Variables:
          DiskSize:
            Ref: EksWorkshopC9InstanceVolumeSize
      MemorySize: 256
      Timeout: '900'
      Code:
        ZipFile: |
          from __future__ import print_function        
          import cfnresponse
          import boto3
          import json
          import time
          import os
          import traceback
          import logging
          logger = logging.getLogger(__name__)          

          def lambda_handler(event, context):
              print(event)
              print(event.values())
              print('context: {}'.format(context))
              responseData = {}

              status = cfnresponse.SUCCESS

              if event['RequestType'] == 'Delete':
                  print('Deleting Event')
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')  
                  return

              print('Creating Event')
              try:
                  # Open AWS clients
                  ec2 = boto3.client('ec2')
                  ssm = boto3.client('ssm')              
                  sts_client = boto3.client('sts')
                  session = boto3.session.Session()
    
                  account_id = session.client('sts').get_caller_identity()['Account']

                  environmentId = event['ResourceProperties']['Cloud9EnvironmentId']

                  print('Assume Role: ' + event['ResourceProperties']['InstanceRoleArn'] )
                  assumed_role_object=sts_client.assume_role(
                      RoleArn=event['ResourceProperties']['InstanceRoleArn'],
                      RoleSessionName="MasterKey"
                  )

                  creds = assumed_role_object['Credentials']

                  cloud9 = boto3.client('cloud9',
                      aws_access_key_id=creds['AccessKeyId'],
                      aws_secret_access_key=creds['SecretAccessKey'],
                      aws_session_token=creds['SessionToken']
                  )

                  cloud9.create_environment_membership(
                      environmentId=environmentId,
                      permissions='read-write',
                      userArn=f'arn:aws:sts::{account_id}:assumed-role/WSParticipantRole/Participant'
                  )

                  cloud9.create_environment_membership(
                      environmentId=environmentId,
                      permissions='read-write',
                      userArn=f'arn:aws:sts::{account_id}:assumed-role/WSOpsRole/Ops',
                  )

                  cloud9.update_environment(
                      environmentId=environmentId,
                      managedCredentialsAction='DISABLE'
                  )

                  # Get the InstanceId of the Cloud9 IDE
                  instance = ec2.describe_instances(Filters=[{'Name': 'tag:aws:cloud9:environment','Values': [event['ResourceProperties']['Cloud9EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                  print('instance: {}'.format(instance))
                  instance_id = instance['InstanceId']

                  # Get the Cloud9 SecurityGroup
                  security_group_id = instance['NetworkInterfaces'][0]['Groups'][0]['GroupId']
                  print('Instance ID: ' + instance_id);
                  print('Security Group ID: ' + security_group_id);

                  # Create the IamInstanceProfile request object
                  iam_instance_profile = {
                      'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                      'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                  }
                  print('Found IAM instance profile: {}'.format(iam_instance_profile))

                  time.sleep(10)
                  print('Waiting for the instance to be ready...')
      
                  # Wait for Instance to become ready before adding Role
                  instance_state = instance['State']['Name']
                  print('instance_state: {}'.format(instance_state))
                  waiter = ec2.get_waiter('instance_running')
                  waiter.wait(InstanceIds=[instance_id])
                  instance_state = ec2.describe_instances(InstanceIds=[instance_id])
                  print('instance_state: {}'.format(instance_state))

                  print('Instance is ready')

                  #Associate cloud9 with appropriate IAM Role
                  associations = ec2.describe_iam_instance_profile_associations(
                      Filters=[
                          {
                              'Name': 'instance-id',
                              'Values': [instance_id],
                          },
                      ],
                  )

                  if len(associations['IamInstanceProfileAssociations']) > 0:
                    print('Replacing existing IAM profile...')
                    for association in associations['IamInstanceProfileAssociations']:
                      if association['State'] == 'associated':
                        print("{} is active with state {}".format(association['AssociationId'], association['State']))
                        ec2.replace_iam_instance_profile_association(AssociationId=association['AssociationId'], IamInstanceProfile=iam_instance_profile)
                  else:
                    print('Associating IAM profile...')
                    ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance_id)

                  #Check Cloud9 instance volume size
                  block_volume_id = instance['BlockDeviceMappings'][0]['Ebs']['VolumeId']

                  block_device = ec2.describe_volumes(VolumeIds=[block_volume_id])['Volumes'][0]

                  DiskSize = int(os.environ['DiskSize'])
                  if block_device['Size'] < DiskSize:
                    ec2.modify_volume(VolumeId=block_volume_id,Size=DiskSize)
                    print('Modifying block volume: {}'.format(block_volume_id))
                    time.sleep(10)

                    for i in range(1, 30):
                      response = ec2.describe_volumes_modifications(
                        VolumeIds=[
                          block_volume_id
                        ]
                      )
                      modify_state = response['VolumesModifications'][0]['ModificationState']
                      if modify_state != 'modifying':
                        print('Volume has been resized')
                        break
                      time.sleep(10)
                  else:
                    print('Volume is already sized')    


                  # Reboot is required to avoid weird race condition with IAM role and SSM agent
                  # It also causes the file system to expand in the OS
                  print('Rebooting instance')
                  ec2.reboot_instances(
                      InstanceIds=[
                          instance_id,
                      ],
                  )

                  time.sleep(60)

                  print('Waiting for instance to come online in SSM...')

                  for i in range(1, 60):
                    response = ssm.describe_instance_information(Filters=[{'Key': 'InstanceIds', 'Values': [instance_id]}])
                    if len(response["InstanceInformationList"]) == 0:
                      print('No instances in SSM')
                    elif len(response["InstanceInformationList"]) > 0 and \
                          response["InstanceInformationList"][0]["PingStatus"] == "Online" and \
                          response["InstanceInformationList"][0]["InstanceId"] == instance_id:
                      print('Instance is online in SSM')
                      break
                    time.sleep(10)     

                  ssm_document = event['ResourceProperties']['SsmDocument']
                  print('Sending SSM command...')

                  response = ssm.send_command(
                    InstanceIds=[instance_id],
                    DocumentName=ssm_document)
            
                  command_id = response['Command']['CommandId']

                  waiter = ssm.get_waiter('command_executed')

                  waiter.wait(
                    CommandId=command_id,
                    InstanceId=instance_id,
                    WaiterConfig={
                      'Delay': 10,
                      'MaxAttempts': 30
                    }
                  )

                  print(response)
                  responseData = {
                    'Success': 'Started bootstrapping for instance: '+instance_id,
                    'SecurityGroupId': security_group_id,
                    'additional': 'output2'
                  }
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')

              except Exception as e:
                  status = cfnresponse.FAILED
                  print(traceback.format_exc())
                  responseData = {'Error': traceback.format_exc(e)}
              finally:
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
              print('end init')                     

  EksWorkshopC9SSMDocument: 
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Command
      DocumentFormat: YAML
      Content: 
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
        - action: aws:runShellScript
          name: EksWorkshopC9bootstrap
          inputs:
            runCommand:
            - !Sub |
                set -e

                su -l -c 'aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com' ec2-user
                curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'
                unzip -o -q awscliv2.zip -d /tmp
                sudo /tmp/aws/install --update
                rm -rf aws awscliv2.zip
                curl -sSL -o /tmp/kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.2/2023-10-12/bin/linux/amd64/kubectl
                chmod +x /tmp/kubectl
                mv /tmp/kubectl /usr/local/bin/kubectl
                su -l -c 'aws eks update-kubeconfig --name ${EKSCluster} --region ${AWS::Region} --role-arn ${Cloud9InstanceRole.Arn}' ec2-user
                su -l -c 'echo "export AWS_ACCOUNT_ID=${AWS::AccountId}" >> ~/.bash_profile' ec2-user
                su -l -c 'echo "export ACCOUNT_ID=${AWS::AccountId}" >> ~/.bash_profile' ec2-user
                su -l -c 'echo "export AWS_DEFAULT_REGION=${AWS::Region}" >> ~/.bash_profile' ec2-user
                su -l -c 'echo "export AWS_REGION=${AWS::Region}" >> ~/.bash_profile' ec2-user
                su -l -c 'echo "export EKS_CLUSTER=${EKSCluster}" >> ~/.bash_profile' ec2-user
                su -l -c 'echo "export EKS_CLUSTER1_NAME=${EKSCluster}" >> ~/.bash_profile' ec2-user
                su -l -c 'echo "Found the Cloud9ID envs ${Cloud9Environment}"' ec2-user
                su -l -c 'echo "aws cloud9 update-environment  --environment-id ${Cloud9Environment} --managed-credentials-action DISABLE > /dev/null 2>&1" |  tee -a ~/.bash_profile' ec2-user
                export AZS=($(aws ec2 describe-availability-zones --query 'AvailabilityZones[].ZoneName' --output text --region ${AWS::Region}))
                su -l -c 'echo "export AZS=($AZS[@])" | tee -a ~/.bash_profile' ec2-user
                curl -sSL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                chmod +x /tmp/eksctl
                mv /tmp/eksctl /usr/local/bin
                yum -y install jq envsubst gettext bash-completion moreutils
                echo 'yq() {
                  docker run --rm -i -v "$PWD":/workdir mikefarah/yq "$@"
                  }' | tee -a /home/ec2-user/bashrc
                /usr/local/bin/kubectl completion bash > /etc/bash_completion.d/kubectl
                /usr/local/bin/eksctl completion bash > /etc/bash_completion.d/eksctl
                su -l -c 'echo "alias k=kubectl" >> ~/.bash_profile' ec2-user
                su -l -c 'echo "alias ll=ls -la" >> ~/.bash_profile' ec2-user
                su -l -c 'echo "complete -F __start_kubectl k" >> ~/.bash_profile' ec2-user
                curl -fsSL -o /tmp/helm.tgz https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz
                tar -C /tmp -xzf /tmp/helm.tgz
                mv /tmp/linux-amd64/helm /usr/local/bin/helm
                rm -rf /tmp/helm.tgz /tmp/linux-amd64
                su -l -c 'helm repo add eks https://aws.github.io/eks-charts' ec2-user
                su -l -c 'helm repo update' ec2-user
                su -l -c 'curl -sS https://webinstall.dev/k9s | bash' ec2-user
                /home/ec2-user/.nvm/versions/node/`node -v`/bin/npm  i -g c9
                su -l -c 'aws configure set default.region ${AWS::Region}' ec2-user
                su -l -c 'aws configure set cli_pager ""' ec2-user                
                # This must be the last line - do not add any lines after this!
                shutdown -r 1

  CodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Codebuild Internet Group
      GroupDescription: CodeBuild SecurityGroup
      VpcId: !Ref VPC

Outputs:

  VPC:
    Description: 'VPC'
    Value: !Ref VPC
    Export:
      Name: vpcId


  SubnetAPrivate:
    Description: 'Subnet A private'
    Value: !Ref PrivateSubnetA
    Export:
      Name: SubnetAPrivate

